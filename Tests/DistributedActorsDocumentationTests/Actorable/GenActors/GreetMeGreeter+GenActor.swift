// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2018-2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import DistributedActors
import DistributedActorsTestKit
import XCTest

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated GreetMeGreeter messages 

/// DO NOT EDIT: Generated GreetMeGreeter messages
extension GreetMeGreeter {

    public enum Message: Codable {
        case greet(Actor<GreetMe>) 
    }
    
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated GreetMeGreeter behavior

extension GreetMeGreeter {

    public static func makeBehavior(instance: GreetMeGreeter) -> Behavior<Message> {
        return .setup { _context in
            let context = Actor<GreetMeGreeter>.Context(underlying: _context)
            let instance = instance

            instance.preStart(context: context)

            return Behavior<Message>.receiveMessage { message in
                switch message { 
                
                case .greet(let greetMe):
                    instance.greet(greetMe)
 
                
                }
                return .same
            }.receiveSignal { _context, signal in 
                let context = Actor<GreetMeGreeter>.Context(underlying: _context)

                switch signal {
                case is Signals.PostStop: 
                    instance.postStop(context: context)
                    return .same
                case let terminated as Signals.Terminated:
                    switch try instance.receiveTerminated(context: context, terminated: terminated) {
                    case .unhandled: 
                        return .unhandled
                    case .stop: 
                        return .stop
                    case .ignore: 
                        return .same
                    }
                default:
                    try instance.receiveSignal(context: context, signal: signal)
                    return .same
                }
            }
        }
    }
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: Extend Actor for GreetMeGreeter

extension Actor where A.Message == GreetMeGreeter.Message {

     func greet(_ greetMe: Actor<GreetMe>) {
        self.ref.tell(Self.Message.greet(greetMe))
    }
 

}
