// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2018-2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// tag::imports[]

import DistributedActors

// end::imports[]

import DistributedActorsTestKit
import XCTest

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated CoffeeMachine messages 

extension GeneratedActor.Messages {
    public enum CoffeeMachine: ActorMessage { 
        case makeCoffee(_replyTo: ActorRef<Coffee>)  
    }
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Boxing CoffeeMachine for any inheriting actorable `A` 

extension Actor where Act: CoffeeMachine {

    public func makeCoffee() -> Reply<Coffee> {
        // TODO: FIXME perhaps timeout should be taken from context
        Reply.from(askResponse: 
            self.ref.ask(for: Coffee.self, timeout: .effectivelyInfinite) { _replyTo in
                Act._boxCoffeeMachine(.makeCoffee(_replyTo: _replyTo))
            }
        )
    }
 

}
