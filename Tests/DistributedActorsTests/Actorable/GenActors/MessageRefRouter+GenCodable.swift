// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019-2020 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

@testable import DistributedActors
import DistributedActorsTestKit
import XCTest

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for MessageRefRouter.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension MessageRefRouter.Message {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case registerTarget
        case dispatchMessage

    }

    public enum CodingKeys: CodingKey {
        case _case
        case registerTarget_identifier
        case registerTarget_actor
        case dispatchMessage_identifier
        case dispatchMessage_message
        case dispatchMessage_replyTo

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .registerTarget:
            let identifier = try container.decode(String.self, forKey: CodingKeys.registerTarget_identifier)
            let ref = try container.decode(ActorRef<GeneratedActor.Messages.MessageTarget>.self, forKey: CodingKeys.registerTarget_actor)
            self = .registerTarget(identifier, actor: ref)
        case .dispatchMessage:
            let identifier = try container.decode(String.self, forKey: CodingKeys.dispatchMessage_identifier)
            let message = try container.decode(MessageType.self, forKey: CodingKeys.dispatchMessage_message)
            let replyTo = try container.decode(ActorRef<String>.self, forKey: CodingKeys.dispatchMessage_replyTo)
            self = .dispatchMessage(identifier, message: message, replyTo: replyTo)

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .registerTarget(let identifier, let ref):
            try container.encode(DiscriminatorKeys.registerTarget.rawValue, forKey: CodingKeys._case)
            try container.encode(identifier, forKey: CodingKeys.registerTarget_identifier)
            try container.encode(ref, forKey: CodingKeys.registerTarget_actor)
        case .dispatchMessage(let identifier, let message, let replyTo):
            try container.encode(DiscriminatorKeys.dispatchMessage.rawValue, forKey: CodingKeys._case)
            try container.encode(identifier, forKey: CodingKeys.dispatchMessage_identifier)
            try container.encode(message, forKey: CodingKeys.dispatchMessage_message)
            try container.encode(replyTo, forKey: CodingKeys.dispatchMessage_replyTo)

        }
    }
}
