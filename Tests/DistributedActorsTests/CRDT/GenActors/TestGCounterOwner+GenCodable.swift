// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019-2020 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

@testable import DistributedActors
import DistributedActorsTestKit
import NIO
import XCTest

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for TestGCounterOwner.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension TestGCounterOwner.Message {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case increment
        case read
        case delete
        case lastObservedValue
        case status

    }

    public enum CodingKeys: CodingKey {
        case _case
        case increment_amount
        case increment_consistency
        case increment_timeout
        case increment__replyTo
        case read_consistency
        case read_timeout
        case read__replyTo
        case delete_consistency
        case delete_timeout
        case delete__replyTo
        case lastObservedValue__replyTo
        case status__replyTo

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .increment:
            let amount = try container.decode(Int.self, forKey: CodingKeys.increment_amount)
            let consistency = try container.decode(CRDT.OperationConsistency.self, forKey: CodingKeys.increment_consistency)
            let timeout = try container.decode(DistributedActors.TimeAmount.self, forKey: CodingKeys.increment_timeout)
            let _replyTo = try container.decode(ActorRef<Int>.self, forKey: CodingKeys.increment__replyTo)
            self = .increment(amount: amount, consistency: consistency, timeout: timeout, _replyTo: _replyTo)
        case .read:
            let consistency = try container.decode(CRDT.OperationConsistency.self, forKey: CodingKeys.read_consistency)
            let timeout = try container.decode(DistributedActors.TimeAmount.self, forKey: CodingKeys.read_timeout)
            let _replyTo = try container.decode(ActorRef<Result<Int, ErrorEnvelope>>.self, forKey: CodingKeys.read__replyTo)
            self = .read(consistency: consistency, timeout: timeout, _replyTo: _replyTo)
        case .delete:
            let consistency = try container.decode(CRDT.OperationConsistency.self, forKey: CodingKeys.delete_consistency)
            let timeout = try container.decode(DistributedActors.TimeAmount.self, forKey: CodingKeys.delete_timeout)
            let _replyTo = try container.decode(ActorRef<String>.self, forKey: CodingKeys.delete__replyTo)
            self = .delete(consistency: consistency, timeout: timeout, _replyTo: _replyTo)
        case .lastObservedValue:
            let _replyTo = try container.decode(ActorRef<Int>.self, forKey: CodingKeys.lastObservedValue__replyTo)
            self = .lastObservedValue(_replyTo: _replyTo)
        case .status:
            let _replyTo = try container.decode(ActorRef<CRDT.Status>.self, forKey: CodingKeys.status__replyTo)
            self = .status(_replyTo: _replyTo)

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .increment(let amount, let consistency, let timeout, let _replyTo):
            try container.encode(DiscriminatorKeys.increment.rawValue, forKey: CodingKeys._case)
            try container.encode(amount, forKey: CodingKeys.increment_amount)
            try container.encode(consistency, forKey: CodingKeys.increment_consistency)
            try container.encode(timeout, forKey: CodingKeys.increment_timeout)
            try container.encode(_replyTo, forKey: CodingKeys.increment__replyTo)
        case .read(let consistency, let timeout, let _replyTo):
            try container.encode(DiscriminatorKeys.read.rawValue, forKey: CodingKeys._case)
            try container.encode(consistency, forKey: CodingKeys.read_consistency)
            try container.encode(timeout, forKey: CodingKeys.read_timeout)
            try container.encode(_replyTo, forKey: CodingKeys.read__replyTo)
        case .delete(let consistency, let timeout, let _replyTo):
            try container.encode(DiscriminatorKeys.delete.rawValue, forKey: CodingKeys._case)
            try container.encode(consistency, forKey: CodingKeys.delete_consistency)
            try container.encode(timeout, forKey: CodingKeys.delete_timeout)
            try container.encode(_replyTo, forKey: CodingKeys.delete__replyTo)
        case .lastObservedValue(let _replyTo):
            try container.encode(DiscriminatorKeys.lastObservedValue.rawValue, forKey: CodingKeys._case)
            try container.encode(_replyTo, forKey: CodingKeys.lastObservedValue__replyTo)
        case .status(let _replyTo):
            try container.encode(DiscriminatorKeys.status.rawValue, forKey: CodingKeys._case)
            try container.encode(_replyTo, forKey: CodingKeys.status__replyTo)

        }
    }
}
