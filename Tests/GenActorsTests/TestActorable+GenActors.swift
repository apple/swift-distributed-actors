// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

import DistributedActors

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated TestActorable messages 

extension TestActorable {
    public enum Message { 
        case ping 
        case greet(name: String) 
        case greetUnderscoreParam(String) 
        case greet2(name: String, surname: String) 
        case greetReplyToActorRef(name: String, replyTo: ActorRef<String>) 
        case throwing 
        case contextSpawnExample 
        case timer  
    }
}

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated TestActorable behavior

extension TestActorable {
    public static func makeBehavior(instance: TestActorable) -> Behavior<Message> {
        return .setup { context in
            var instance = instance // TODO only var if any of the methods are mutating

            // /* await */ self.instance.preStart(context: context) // TODO: enable preStart

            return .receiveMessage { message in
                switch message { 
                
                case .ping:
                    instance.ping() 
                case .greet(let name):
                    instance.greet(name: name) 
                case .greetUnderscoreParam(let name):
                    instance.greetUnderscoreParam(name) 
                case .greet2(let name, let surname):
                    instance.greet2(name: name, surname: surname) 
                case .greetReplyToActorRef(let name, let replyTo):
                    instance.greetReplyToActorRef(name: name, replyTo: replyTo) 
                case .throwing:
                    try instance.throwing() 
                case .contextSpawnExample:
                    try instance.contextSpawnExample() 
                case .timer:
                    instance.timer() 
                }
                return .same
            }
        }
    }

}

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: Extend Actor for TestActorable

extension Actor where A.Message == TestActorable.Message {
    
    public func ping() { // TODO: returning things
        self.ref.tell(.ping)
    } 
    
    public func greet(name: String) { // TODO: returning things
        self.ref.tell(.greet(name: name))
    } 
    
    public func greetUnderscoreParam(_ name: String) { // TODO: returning things
        self.ref.tell(.greetUnderscoreParam(name))
    } 
    
    public func greet2(name: String, surname: String) { // TODO: returning things
        self.ref.tell(.greet2(name: name, surname: surname))
    } 
    
    public func greetReplyToActorRef(name: String, replyTo: ActorRef<String>) { // TODO: returning things
        self.ref.tell(.greetReplyToActorRef(name: name, replyTo: replyTo))
    } 
    
    public func throwing() { // TODO: returning things
        self.ref.tell(.throwing)
    } 
    
     func contextSpawnExample() { // TODO: returning things
        self.ref.tell(.contextSpawnExample)
    } 
    
     func timer() { // TODO: returning things
        self.ref.tell(.timer)
    } 
    
}
