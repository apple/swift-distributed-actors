// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019-2020 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import DistributedActors

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for GenericEchoWhere.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension GenericEchoWhere.Message {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case echoOne
        case echoTwo

    }

    public enum CodingKeys: CodingKey {
        case _case
        case echoOne_one
        case echoOne__replyTo
        case echoTwo_two
        case echoTwo__replyTo

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .echoOne:
            let one = try container.decode(One.self, forKey: CodingKeys.echoOne_one)
            let _replyTo = try container.decode(ActorRef<One>.self, forKey: CodingKeys.echoOne__replyTo)
            self = .echoOne(one, _replyTo: _replyTo)
        case .echoTwo:
            let two = try container.decode(Two.self, forKey: CodingKeys.echoTwo_two)
            let _replyTo = try container.decode(ActorRef<Two>.self, forKey: CodingKeys.echoTwo__replyTo)
            self = .echoTwo(two, _replyTo: _replyTo)

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .echoOne(let one, let _replyTo):
            try container.encode(DiscriminatorKeys.echoOne.rawValue, forKey: CodingKeys._case)
            try container.encode(one, forKey: CodingKeys.echoOne_one)
            try container.encode(_replyTo, forKey: CodingKeys.echoOne__replyTo)
        case .echoTwo(let two, let _replyTo):
            try container.encode(DiscriminatorKeys.echoTwo.rawValue, forKey: CodingKeys._case)
            try container.encode(two, forKey: CodingKeys.echoTwo_two)
            try container.encode(_replyTo, forKey: CodingKeys.echoTwo__replyTo)

        }
    }
}
