// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import DistributedActors
import class NIO.EventLoopFuture

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for LifecycleActor.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension LifecycleActor.Message {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case hello
        case pleaseStopViaBehavior
        case pleaseStopViaContextStop
        case pleaseStopViaContextStopCalledManyTimes
        case watchChildAndTerminateIt
        case _doNOTSkipMe

    }

    public enum CodingKeys: CodingKey {
        case _case
        case hello__replyTo
        case pleaseStopViaContextStop__replyTo

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .hello:
            let _replyTo = try container.decode(ActorRef<String>.self, forKey: CodingKeys.hello__replyTo)
            self = .hello(_replyTo: _replyTo)
        case .pleaseStopViaBehavior:
            self = .pleaseStopViaBehavior
        case .pleaseStopViaContextStop:
            let _replyTo = try container.decode(ActorRef<String>.self, forKey: CodingKeys.pleaseStopViaContextStop__replyTo)
            self = .pleaseStopViaContextStop(_replyTo: _replyTo)
        case .pleaseStopViaContextStopCalledManyTimes:
            self = .pleaseStopViaContextStopCalledManyTimes
        case .watchChildAndTerminateIt:
            self = .watchChildAndTerminateIt
        case ._doNOTSkipMe:
            self = ._doNOTSkipMe

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .hello(let _replyTo):
            try container.encode(DiscriminatorKeys.hello.rawValue, forKey: CodingKeys._case)
            try container.encode(_replyTo, forKey: CodingKeys.hello__replyTo)
        case .pleaseStopViaBehavior:
            try container.encode(DiscriminatorKeys.pleaseStopViaBehavior.rawValue, forKey: CodingKeys._case)
        case .pleaseStopViaContextStop(let _replyTo):
            try container.encode(DiscriminatorKeys.pleaseStopViaContextStop.rawValue, forKey: CodingKeys._case)
            try container.encode(_replyTo, forKey: CodingKeys.pleaseStopViaContextStop__replyTo)
        case .pleaseStopViaContextStopCalledManyTimes:
            try container.encode(DiscriminatorKeys.pleaseStopViaContextStopCalledManyTimes.rawValue, forKey: CodingKeys._case)
        case .watchChildAndTerminateIt:
            try container.encode(DiscriminatorKeys.watchChildAndTerminateIt.rawValue, forKey: CodingKeys._case)
        case ._doNOTSkipMe:
            try container.encode(DiscriminatorKeys._doNOTSkipMe.rawValue, forKey: CodingKeys._case)

        }
    }
}
