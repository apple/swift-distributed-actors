// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for LifecycleActor.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

 extension LifecycleActor.Message: Codable {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        
        case pleaseStop
        case watchChildAndTerminateIt
        case _doNOTSkipMe
    }

     public enum CodingKeys: CodingKey {
        case _case
        
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        
        case .pleaseStop:
            self = .pleaseStop

        case .watchChildAndTerminateIt:
            self = .watchChildAndTerminateIt

        case ._doNOTSkipMe:
            self = ._doNOTSkipMe

        }
    }

     public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        
        case .pleaseStop:
    try container.encode(DiscriminatorKeys.pleaseStop.rawValue, forKey: CodingKeys._case)

        case .watchChildAndTerminateIt:
    try container.encode(DiscriminatorKeys.watchChildAndTerminateIt.rawValue, forKey: CodingKeys._case)

        case ._doNOTSkipMe:
    try container.encode(DiscriminatorKeys._doNOTSkipMe.rawValue, forKey: CodingKeys._case)

        }
    }
}