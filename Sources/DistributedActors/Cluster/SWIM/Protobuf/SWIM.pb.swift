// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cluster/SWIM/SWIM.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct ProtoSWIMRemoteMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: OneOf_Message? {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  public var ping: ProtoSWIMPing {
    get {
      if case .ping(let v)? = _storage._message {return v}
      return ProtoSWIMPing()
    }
    set {_uniqueStorage()._message = .ping(newValue)}
  }

  public var pingRequest: ProtoSWIMPingRequest {
    get {
      if case .pingRequest(let v)? = _storage._message {return v}
      return ProtoSWIMPingRequest()
    }
    set {_uniqueStorage()._message = .pingRequest(newValue)}
  }

  public var pingResponse: ProtoSWIMPingResponse {
    get {
      if case .pingResponse(let v)? = _storage._message {return v}
      return ProtoSWIMPingResponse()
    }
    set {_uniqueStorage()._message = .pingResponse(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Message: Equatable {
    case ping(ProtoSWIMPing)
    case pingRequest(ProtoSWIMPingRequest)
    case pingResponse(ProtoSWIMPingResponse)

  #if !swift(>=4.1)
    public static func ==(lhs: ProtoSWIMRemoteMessage.OneOf_Message, rhs: ProtoSWIMRemoteMessage.OneOf_Message) -> Bool {
      switch (lhs, rhs) {
      case (.ping(let l), .ping(let r)): return l == r
      case (.pingRequest(let l), .pingRequest(let r)): return l == r
      case (.pingResponse(let l), .pingResponse(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoSWIMPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var origin: ProtoActorAddress {
    get {return _storage._origin ?? ProtoActorAddress()}
    set {_uniqueStorage()._origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return _storage._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
  public mutating func clearOrigin() {_uniqueStorage()._origin = nil}

  public var payload: ProtoSWIMGossipPayload {
    get {return _storage._payload ?? ProtoSWIMGossipPayload()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {_uniqueStorage()._payload = nil}

  public var sequenceNumber: UInt32 {
    get {return _storage._sequenceNumber}
    set {_uniqueStorage()._sequenceNumber = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoSWIMPingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: ProtoActorAddress {
    get {return _storage._target ?? ProtoActorAddress()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var origin: ProtoActorAddress {
    get {return _storage._origin ?? ProtoActorAddress()}
    set {_uniqueStorage()._origin = newValue}
  }
  /// Returns true if `origin` has been explicitly set.
  public var hasOrigin: Bool {return _storage._origin != nil}
  /// Clears the value of `origin`. Subsequent reads from it will return its default value.
  public mutating func clearOrigin() {_uniqueStorage()._origin = nil}

  public var payload: ProtoSWIMGossipPayload {
    get {return _storage._payload ?? ProtoSWIMGossipPayload()}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {_uniqueStorage()._payload = nil}

  public var sequenceNumber: UInt32 {
    get {return _storage._sequenceNumber}
    set {_uniqueStorage()._sequenceNumber = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoSWIMPingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pingResponse: OneOf_PingResponse? {
    get {return _storage._pingResponse}
    set {_uniqueStorage()._pingResponse = newValue}
  }

  public var ack: ProtoSWIMPingResponse.Ack {
    get {
      if case .ack(let v)? = _storage._pingResponse {return v}
      return ProtoSWIMPingResponse.Ack()
    }
    set {_uniqueStorage()._pingResponse = .ack(newValue)}
  }

  public var nack: ProtoSWIMPingResponse.Nack {
    get {
      if case .nack(let v)? = _storage._pingResponse {return v}
      return ProtoSWIMPingResponse.Nack()
    }
    set {_uniqueStorage()._pingResponse = .nack(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_PingResponse: Equatable {
    case ack(ProtoSWIMPingResponse.Ack)
    case nack(ProtoSWIMPingResponse.Nack)

  #if !swift(>=4.1)
    public static func ==(lhs: ProtoSWIMPingResponse.OneOf_PingResponse, rhs: ProtoSWIMPingResponse.OneOf_PingResponse) -> Bool {
      switch (lhs, rhs) {
      case (.ack(let l), .ack(let r)): return l == r
      case (.nack(let l), .nack(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct Ack {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var target: ProtoActorAddress {
      get {return _storage._target ?? ProtoActorAddress()}
      set {_uniqueStorage()._target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    public var hasTarget: Bool {return _storage._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    public mutating func clearTarget() {_uniqueStorage()._target = nil}

    public var incarnation: UInt64 {
      get {return _storage._incarnation}
      set {_uniqueStorage()._incarnation = newValue}
    }

    public var payload: ProtoSWIMGossipPayload {
      get {return _storage._payload ?? ProtoSWIMGossipPayload()}
      set {_uniqueStorage()._payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    public var hasPayload: Bool {return _storage._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
    public mutating func clearPayload() {_uniqueStorage()._payload = nil}

    public var sequenceNumber: UInt32 {
      get {return _storage._sequenceNumber}
      set {_uniqueStorage()._sequenceNumber = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Nack {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var target: ProtoActorAddress {
      get {return _storage._target ?? ProtoActorAddress()}
      set {_uniqueStorage()._target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    public var hasTarget: Bool {return _storage._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    public mutating func clearTarget() {_uniqueStorage()._target = nil}

    public var sequenceNumber: UInt32 {
      get {return _storage._sequenceNumber}
      set {_uniqueStorage()._sequenceNumber = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoSWIMStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: ProtoSWIMStatus.TypeEnum = .unspecified

  public var incarnation: UInt64 = 0

  public var suspectedBy: [ProtoUniqueNode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unspecified // = 0
    case alive // = 1
    case suspect // = 2
    case unreachable // = 3
    case dead // = 4
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecified
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .alive
      case 2: self = .suspect
      case 3: self = .unreachable
      case 4: self = .dead
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .alive: return 1
      case .suspect: return 2
      case .unreachable: return 3
      case .dead: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension ProtoSWIMStatus.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [ProtoSWIMStatus.TypeEnum] = [
    .unspecified,
    .alive,
    .suspect,
    .unreachable,
    .dead,
  ]
}

#endif  // swift(>=4.2)

public struct ProtoSWIMMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var address: ProtoActorAddress {
    get {return _storage._address ?? ProtoActorAddress()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {_uniqueStorage()._address = nil}

  public var status: ProtoSWIMStatus {
    get {return _storage._status ?? ProtoSWIMStatus()}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var protocolPeriod: UInt64 {
    get {return _storage._protocolPeriod}
    set {_uniqueStorage()._protocolPeriod = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoSWIMGossipPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var member: [ProtoSWIMMember] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoSWIMRemoteMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMRemoteMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ping"),
    2: .same(proto: "pingRequest"),
    3: .same(proto: "pingResponse"),
  ]

  fileprivate class _StorageClass {
    var _message: ProtoSWIMRemoteMessage.OneOf_Message?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: ProtoSWIMPing?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .ping(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .ping(v)}
        case 2:
          var v: ProtoSWIMPingRequest?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .pingRequest(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .pingRequest(v)}
        case 3:
          var v: ProtoSWIMPingResponse?
          if let current = _storage._message {
            try decoder.handleConflictingOneOf()
            if case .pingResponse(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._message = .pingResponse(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._message {
      case .ping(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .pingRequest(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .pingResponse(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMRemoteMessage, rhs: ProtoSWIMRemoteMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMPing"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .same(proto: "payload"),
    3: .same(proto: "sequenceNumber"),
  ]

  fileprivate class _StorageClass {
    var _origin: ProtoActorAddress? = nil
    var _payload: ProtoSWIMGossipPayload? = nil
    var _sequenceNumber: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _origin = source._origin
      _payload = source._payload
      _sequenceNumber = source._sequenceNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._origin)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._payload)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._sequenceNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._origin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._sequenceNumber != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sequenceNumber, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMPing, rhs: ProtoSWIMPing) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._sequenceNumber != rhs_storage._sequenceNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMPingRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "origin"),
    3: .same(proto: "payload"),
    4: .same(proto: "sequenceNumber"),
  ]

  fileprivate class _StorageClass {
    var _target: ProtoActorAddress? = nil
    var _origin: ProtoActorAddress? = nil
    var _payload: ProtoSWIMGossipPayload? = nil
    var _sequenceNumber: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _origin = source._origin
      _payload = source._payload
      _sequenceNumber = source._sequenceNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._origin)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._payload)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._sequenceNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._origin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._sequenceNumber != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sequenceNumber, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMPingRequest, rhs: ProtoSWIMPingRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._sequenceNumber != rhs_storage._sequenceNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMPingResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ack"),
    2: .same(proto: "nack"),
  ]

  fileprivate class _StorageClass {
    var _pingResponse: ProtoSWIMPingResponse.OneOf_PingResponse?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pingResponse = source._pingResponse
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: ProtoSWIMPingResponse.Ack?
          if let current = _storage._pingResponse {
            try decoder.handleConflictingOneOf()
            if case .ack(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._pingResponse = .ack(v)}
        case 2:
          var v: ProtoSWIMPingResponse.Nack?
          if let current = _storage._pingResponse {
            try decoder.handleConflictingOneOf()
            if case .nack(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._pingResponse = .nack(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._pingResponse {
      case .ack(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .nack(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMPingResponse, rhs: ProtoSWIMPingResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pingResponse != rhs_storage._pingResponse {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse.Ack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ProtoSWIMPingResponse.protoMessageName + ".Ack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "incarnation"),
    3: .same(proto: "payload"),
    4: .same(proto: "sequenceNumber"),
  ]

  fileprivate class _StorageClass {
    var _target: ProtoActorAddress? = nil
    var _incarnation: UInt64 = 0
    var _payload: ProtoSWIMGossipPayload? = nil
    var _sequenceNumber: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _incarnation = source._incarnation
      _payload = source._payload
      _sequenceNumber = source._sequenceNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._incarnation)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._payload)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._sequenceNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._incarnation != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._incarnation, fieldNumber: 2)
      }
      if let v = _storage._payload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._sequenceNumber != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sequenceNumber, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMPingResponse.Ack, rhs: ProtoSWIMPingResponse.Ack) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._incarnation != rhs_storage._incarnation {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._sequenceNumber != rhs_storage._sequenceNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse.Nack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = ProtoSWIMPingResponse.protoMessageName + ".Nack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "sequenceNumber"),
  ]

  fileprivate class _StorageClass {
    var _target: ProtoActorAddress? = nil
    var _sequenceNumber: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _sequenceNumber = source._sequenceNumber
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._sequenceNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._sequenceNumber != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._sequenceNumber, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMPingResponse.Nack, rhs: ProtoSWIMPingResponse.Nack) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._sequenceNumber != rhs_storage._sequenceNumber {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "incarnation"),
    3: .same(proto: "suspectedBy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.incarnation)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.suspectedBy)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.incarnation != 0 {
      try visitor.visitSingularUInt64Field(value: self.incarnation, fieldNumber: 2)
    }
    if !self.suspectedBy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.suspectedBy, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMStatus, rhs: ProtoSWIMStatus) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.incarnation != rhs.incarnation {return false}
    if lhs.suspectedBy != rhs.suspectedBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMStatus.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "ALIVE"),
    2: .same(proto: "SUSPECT"),
    3: .same(proto: "UNREACHABLE"),
    4: .same(proto: "DEAD"),
  ]
}

extension ProtoSWIMMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMMember"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "status"),
    3: .same(proto: "protocolPeriod"),
  ]

  fileprivate class _StorageClass {
    var _address: ProtoActorAddress? = nil
    var _status: ProtoSWIMStatus? = nil
    var _protocolPeriod: UInt64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _address = source._address
      _status = source._status
      _protocolPeriod = source._protocolPeriod
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._address)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._status)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._protocolPeriod)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._protocolPeriod != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._protocolPeriod, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMMember, rhs: ProtoSWIMMember) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._address != rhs_storage._address {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._protocolPeriod != rhs_storage._protocolPeriod {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMGossipPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "SWIMGossipPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "member"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.member)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.member.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.member, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProtoSWIMGossipPayload, rhs: ProtoSWIMGossipPayload) -> Bool {
    if lhs.member != rhs.member {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
