// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cluster/SWIM/SWIM.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ProtoSWIMRemoteMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var request: ProtoSWIMRemoteMessage.OneOf_Request? = nil

  var ping: ProtoSWIMPing {
    get {
      if case .ping(let v)? = request {return v}
      return ProtoSWIMPing()
    }
    set {request = .ping(newValue)}
  }

  var pingRequest: ProtoSWIMPingRequest {
    get {
      if case .pingRequest(let v)? = request {return v}
      return ProtoSWIMPingRequest()
    }
    set {request = .pingRequest(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Request: Equatable {
    case ping(ProtoSWIMPing)
    case pingRequest(ProtoSWIMPingRequest)

  #if !swift(>=4.1)
    static func ==(lhs: ProtoSWIMRemoteMessage.OneOf_Request, rhs: ProtoSWIMRemoteMessage.OneOf_Request) -> Bool {
      switch (lhs, rhs) {
      case (.ping(let l), .ping(let r)): return l == r
      case (.pingRequest(let l), .pingRequest(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct ProtoSWIMPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var replyTo: ProtoActorAddress {
    get {return _replyTo ?? ProtoActorAddress()}
    set {_replyTo = newValue}
  }
  /// Returns true if `replyTo` has been explicitly set.
  var hasReplyTo: Bool {return self._replyTo != nil}
  /// Clears the value of `replyTo`. Subsequent reads from it will return its default value.
  mutating func clearReplyTo() {self._replyTo = nil}

  var payload: ProtoSWIMPayload {
    get {return _payload ?? ProtoSWIMPayload()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {self._payload = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _replyTo: ProtoActorAddress? = nil
  fileprivate var _payload: ProtoSWIMPayload? = nil
}

struct ProtoSWIMPingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var target: ProtoActorAddress {
    get {return _target ?? ProtoActorAddress()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  mutating func clearTarget() {self._target = nil}

  var replyTo: ProtoActorAddress {
    get {return _replyTo ?? ProtoActorAddress()}
    set {_replyTo = newValue}
  }
  /// Returns true if `replyTo` has been explicitly set.
  var hasReplyTo: Bool {return self._replyTo != nil}
  /// Clears the value of `replyTo`. Subsequent reads from it will return its default value.
  mutating func clearReplyTo() {self._replyTo = nil}

  var payload: ProtoSWIMPayload {
    get {return _payload ?? ProtoSWIMPayload()}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  mutating func clearPayload() {self._payload = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _target: ProtoActorAddress? = nil
  fileprivate var _replyTo: ProtoActorAddress? = nil
  fileprivate var _payload: ProtoSWIMPayload? = nil
}

struct ProtoSWIMPingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pingResponse: ProtoSWIMPingResponse.OneOf_PingResponse? = nil

  var ack: ProtoSWIMPingResponse.Ack {
    get {
      if case .ack(let v)? = pingResponse {return v}
      return ProtoSWIMPingResponse.Ack()
    }
    set {pingResponse = .ack(newValue)}
  }

  var nack: ProtoSWIMPingResponse.Nack {
    get {
      if case .nack(let v)? = pingResponse {return v}
      return ProtoSWIMPingResponse.Nack()
    }
    set {pingResponse = .nack(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_PingResponse: Equatable {
    case ack(ProtoSWIMPingResponse.Ack)
    case nack(ProtoSWIMPingResponse.Nack)

  #if !swift(>=4.1)
    static func ==(lhs: ProtoSWIMPingResponse.OneOf_PingResponse, rhs: ProtoSWIMPingResponse.OneOf_PingResponse) -> Bool {
      switch (lhs, rhs) {
      case (.ack(let l), .ack(let r)): return l == r
      case (.nack(let l), .nack(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  struct Ack {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var target: ProtoActorAddress {
      get {return _target ?? ProtoActorAddress()}
      set {_target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    var hasTarget: Bool {return self._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    mutating func clearTarget() {self._target = nil}

    var payload: ProtoSWIMPayload {
      get {return _payload ?? ProtoSWIMPayload()}
      set {_payload = newValue}
    }
    /// Returns true if `payload` has been explicitly set.
    var hasPayload: Bool {return self._payload != nil}
    /// Clears the value of `payload`. Subsequent reads from it will return its default value.
    mutating func clearPayload() {self._payload = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _target: ProtoActorAddress? = nil
    fileprivate var _payload: ProtoSWIMPayload? = nil
  }

  struct Nack {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var target: ProtoActorAddress {
      get {return _target ?? ProtoActorAddress()}
      set {_target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    var hasTarget: Bool {return self._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    mutating func clearTarget() {self._target = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _target: ProtoActorAddress? = nil
  }

  init() {}
}

struct ProtoSWIMStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: ProtoSWIMStatus.TypeEnum = .unspecified

  var incarnation: UInt64 = 0

  var suspectedBy: [ProtoUniqueNode] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case alive // = 1
    case suspect // = 2
    case unreachable // = 3
    case dead // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unspecified
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .alive
      case 2: self = .suspect
      case 3: self = .unreachable
      case 4: self = .dead
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .alive: return 1
      case .suspect: return 2
      case .unreachable: return 3
      case .dead: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension ProtoSWIMStatus.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [ProtoSWIMStatus.TypeEnum] = [
    .unspecified,
    .alive,
    .suspect,
    .unreachable,
    .dead,
  ]
}

#endif  // swift(>=4.2)

struct ProtoSWIMMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: ProtoActorAddress {
    get {return _address ?? ProtoActorAddress()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  mutating func clearAddress() {self._address = nil}

  var status: ProtoSWIMStatus {
    get {return _status ?? ProtoSWIMStatus()}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _address: ProtoActorAddress? = nil
  fileprivate var _status: ProtoSWIMStatus? = nil
}

struct ProtoSWIMPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var member: [ProtoSWIMMember] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoSWIMRemoteMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMRemoteMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ping"),
    2: .same(proto: "pingRequest"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: ProtoSWIMPing?
        if let current = self.request {
          try decoder.handleConflictingOneOf()
          if case .ping(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.request = .ping(v)}
      case 2:
        var v: ProtoSWIMPingRequest?
        if let current = self.request {
          try decoder.handleConflictingOneOf()
          if case .pingRequest(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.request = .pingRequest(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.request {
    case .ping(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .pingRequest(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMRemoteMessage, rhs: ProtoSWIMRemoteMessage) -> Bool {
    if lhs.request != rhs.request {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMPing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "replyTo"),
    2: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._replyTo)
      case 2: try decoder.decodeSingularMessageField(value: &self._payload)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._replyTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPing, rhs: ProtoSWIMPing) -> Bool {
    if lhs._replyTo != rhs._replyTo {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMPingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "replyTo"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._target)
      case 2: try decoder.decodeSingularMessageField(value: &self._replyTo)
      case 3: try decoder.decodeSingularMessageField(value: &self._payload)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._replyTo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPingRequest, rhs: ProtoSWIMPingRequest) -> Bool {
    if lhs._target != rhs._target {return false}
    if lhs._replyTo != rhs._replyTo {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMPingResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ack"),
    2: .same(proto: "nack"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        var v: ProtoSWIMPingResponse.Ack?
        if let current = self.pingResponse {
          try decoder.handleConflictingOneOf()
          if case .ack(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.pingResponse = .ack(v)}
      case 2:
        var v: ProtoSWIMPingResponse.Nack?
        if let current = self.pingResponse {
          try decoder.handleConflictingOneOf()
          if case .nack(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.pingResponse = .nack(v)}
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.pingResponse {
    case .ack(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    case .nack(let v)?:
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPingResponse, rhs: ProtoSWIMPingResponse) -> Bool {
    if lhs.pingResponse != rhs.pingResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse.Ack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtoSWIMPingResponse.protoMessageName + ".Ack"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._target)
      case 2: try decoder.decodeSingularMessageField(value: &self._payload)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._payload {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPingResponse.Ack, rhs: ProtoSWIMPingResponse.Ack) -> Bool {
    if lhs._target != rhs._target {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPingResponse.Nack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = ProtoSWIMPingResponse.protoMessageName + ".Nack"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._target)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._target {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPingResponse.Nack, rhs: ProtoSWIMPingResponse.Nack) -> Bool {
    if lhs._target != rhs._target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "incarnation"),
    3: .same(proto: "suspectedBy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.incarnation)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.suspectedBy)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.incarnation != 0 {
      try visitor.visitSingularUInt64Field(value: self.incarnation, fieldNumber: 2)
    }
    if !self.suspectedBy.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.suspectedBy, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMStatus, rhs: ProtoSWIMStatus) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.incarnation != rhs.incarnation {return false}
    if lhs.suspectedBy != rhs.suspectedBy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMStatus.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "ALIVE"),
    2: .same(proto: "SUSPECT"),
    3: .same(proto: "UNREACHABLE"),
    4: .same(proto: "DEAD"),
  ]
}

extension ProtoSWIMMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMMember"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._address)
      case 2: try decoder.decodeSingularMessageField(value: &self._status)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._address {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMMember, rhs: ProtoSWIMMember) -> Bool {
    if lhs._address != rhs._address {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProtoSWIMPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SWIMPayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "member"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.member)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.member.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.member, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ProtoSWIMPayload, rhs: ProtoSWIMPayload) -> Bool {
    if lhs.member != rhs.member {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
