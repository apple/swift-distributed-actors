//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import NIO

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: Actor

/// Wraps a reference to an actor.
///
/// All function calls made on this object are turned into message sends and delivered *asynchronously* to the underlying actor.
///
/// It is safe (including thread-safe) to share the `Actor` object with other threads, as well as to share it across the network.
public struct Actor<Act: Actorable>: Codable {
    public typealias Message = Act.Message
    public typealias Myself = Actor<Act>
    public typealias Behavior = DistributedActors.Behavior<Act.Message>

    /// Underlying `ActorRef` to the actor running the `Actorable` behavior.
    public let ref: ActorRef<Act.Message>

    public init(ref: ActorRef<Act.Message>) {
        self.ref = ref
    }
}

extension Actor {
    public var address: ActorAddress {
        self.ref.address
    }

    public var path: ActorPath {
        self.ref.address.path
    }

    public var name: String {
        self.ref.address.path.name
    }
}

extension Actor: Hashable {}

extension Actor: AddressableActor {
    public var asAddressable: AddressableActorRef {
        self._ref.asAddressable
    }
}

extension Actor: DeathWatchable {}

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: ActorProtocol

/// Protocol describing types related to an `Actor<Act>`.
public protocol ActorProtocol: ReceptionistGuest where Message == Act.Message {
    associatedtype Act: Actorable
}

extension Actor: ActorProtocol {
    public var _ref: ActorRef<Act.Message> {
        self.ref
    }
}

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: GeneratedActor.Messages -- container for messages generated by GenActor

/// Namespace GenActor generated types.
///
/// These namespaces are used to not pollute the global namespace with generated type names for the messages.
public enum GeneratedActor {
    /// The enums match the names of the actorable types they were generated from.
    public enum Messages {
        // This enum is intentionally left blank.
    }
}
