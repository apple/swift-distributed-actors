// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CRDT/CRDTReplication.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct ProtoCRDTEnvelope {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var serializerID: UInt32 = 0

    public var payload: Data = SwiftProtobuf.Internal.emptyData

    public var boxed: ProtoCRDTEnvelope.Boxed = .anyCvrdt

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum Boxed: SwiftProtobuf.Enum {
        public typealias RawValue = Int

        //// Box as `AnyCvRDT` when deserializing
        case anyCvrdt // = 0

        //// Box as `AnyDeltaCRDT` when deserializing
        case anyDeltaCrdt // = 1
        case UNRECOGNIZED(Int)

        public init() {
            self = .anyCvrdt
        }

        public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .anyCvrdt
            case 1: self = .anyDeltaCrdt
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        public var rawValue: Int {
            switch self {
            case .anyCvrdt: return 0
            case .anyDeltaCrdt: return 1
            case .UNRECOGNIZED(let i): return i
            }
        }
    }

    public init() {}
}

#if swift(>=4.2)

extension ProtoCRDTEnvelope.Boxed: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static var allCases: [ProtoCRDTEnvelope.Boxed] = [
        .anyCvrdt,
        .anyDeltaCrdt,
    ]
}

#endif // swift(>=4.2)

public struct ProtoCRDTReplicatorMessage {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var value: OneOf_Value? {
        get { return self._storage._value }
        set { _uniqueStorage()._value = newValue }
    }

    public var write: ProtoCRDTWrite {
        get {
            if case .write(let v)? = self._storage._value { return v }
            return ProtoCRDTWrite()
        }
        set { _uniqueStorage()._value = .write(newValue) }
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Value: Equatable {
        case write(ProtoCRDTWrite)

        #if !swift(>=4.1)
        public static func == (lhs: ProtoCRDTReplicatorMessage.OneOf_Value, rhs: ProtoCRDTReplicatorMessage.OneOf_Value) -> Bool {
            switch (lhs, rhs) {
            case (.write(let l), .write(let r)): return l == r
            }
        }
        #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoCRDTWrite {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var identity: ProtoCRDTIdentity {
        get { return self._storage._identity ?? ProtoCRDTIdentity() }
        set { _uniqueStorage()._identity = newValue }
    }

    /// Returns true if `identity` has been explicitly set.
    public var hasIdentity: Bool { return self._storage._identity != nil }
    /// Clears the value of `identity`. Subsequent reads from it will return its default value.
    public mutating func clearIdentity() { _uniqueStorage()._identity = nil }

    public var envelope: ProtoCRDTEnvelope {
        get { return self._storage._envelope ?? ProtoCRDTEnvelope() }
        set { _uniqueStorage()._envelope = newValue }
    }

    /// Returns true if `envelope` has been explicitly set.
    public var hasEnvelope: Bool { return self._storage._envelope != nil }
    /// Clears the value of `envelope`. Subsequent reads from it will return its default value.
    public mutating func clearEnvelope() { _uniqueStorage()._envelope = nil }

    public var replyTo: ProtoActorAddress {
        get { return self._storage._replyTo ?? ProtoActorAddress() }
        set { _uniqueStorage()._replyTo = newValue }
    }

    /// Returns true if `replyTo` has been explicitly set.
    public var hasReplyTo: Bool { return self._storage._replyTo != nil }
    /// Clears the value of `replyTo`. Subsequent reads from it will return its default value.
    public mutating func clearReplyTo() { _uniqueStorage()._replyTo = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

public struct ProtoCRDTWriteResult {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: ProtoCRDTWriteResult.TypeEnum {
        get { return self._storage._type }
        set { _uniqueStorage()._type = newValue }
    }

    public var error: ProtoCRDTWriteError {
        get { return self._storage._error ?? ProtoCRDTWriteError() }
        set { _uniqueStorage()._error = newValue }
    }

    /// Returns true if `error` has been explicitly set.
    public var hasError: Bool { return self._storage._error != nil }
    /// Clears the value of `error`. Subsequent reads from it will return its default value.
    public mutating func clearError() { _uniqueStorage()._error = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum TypeEnum: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case success // = 0
        case failed // = 1
        case UNRECOGNIZED(Int)

        public init() {
            self = .success
        }

        public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .success
            case 1: self = .failed
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        public var rawValue: Int {
            switch self {
            case .success: return 0
            case .failed: return 1
            case .UNRECOGNIZED(let i): return i
            }
        }
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension ProtoCRDTWriteResult.TypeEnum: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static var allCases: [ProtoCRDTWriteResult.TypeEnum] = [
        .success,
        .failed,
    ]
}

#endif // swift(>=4.2)

public struct ProtoCRDTWriteError {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var type: ProtoCRDTWriteError.TypeEnum = .missingCrdtForDelta

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum TypeEnum: SwiftProtobuf.Enum {
        public typealias RawValue = Int
        case missingCrdtForDelta // = 0
        case incorrectDeltaType // = 1
        case cannotWriteDeltaForNonDeltaCrdt // = 2
        case inputAndStoredDataTypeMismatch // = 3
        case unsupportedCrdt // = 4
        case UNRECOGNIZED(Int)

        public init() {
            self = .missingCrdtForDelta
        }

        public init?(rawValue: Int) {
            switch rawValue {
            case 0: self = .missingCrdtForDelta
            case 1: self = .incorrectDeltaType
            case 2: self = .cannotWriteDeltaForNonDeltaCrdt
            case 3: self = .inputAndStoredDataTypeMismatch
            case 4: self = .unsupportedCrdt
            default: self = .UNRECOGNIZED(rawValue)
            }
        }

        public var rawValue: Int {
            switch self {
            case .missingCrdtForDelta: return 0
            case .incorrectDeltaType: return 1
            case .cannotWriteDeltaForNonDeltaCrdt: return 2
            case .inputAndStoredDataTypeMismatch: return 3
            case .unsupportedCrdt: return 4
            case .UNRECOGNIZED(let i): return i
            }
        }
    }

    public init() {}
}

#if swift(>=4.2)

extension ProtoCRDTWriteError.TypeEnum: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    public static var allCases: [ProtoCRDTWriteError.TypeEnum] = [
        .missingCrdtForDelta,
        .incorrectDeltaType,
        .cannotWriteDeltaForNonDeltaCrdt,
        .inputAndStoredDataTypeMismatch,
        .unsupportedCrdt,
    ]
}

#endif // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoCRDTEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "CRDTEnvelope"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "serializerId"),
        2: .same(proto: "payload"),
        3: .same(proto: "boxed"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &self.serializerID)
            case 2: try decoder.decodeSingularBytesField(value: &self.payload)
            case 3: try decoder.decodeSingularEnumField(value: &self.boxed)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.serializerID != 0 {
            try visitor.visitSingularUInt32Field(value: self.serializerID, fieldNumber: 1)
        }
        if !self.payload.isEmpty {
            try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 2)
        }
        if self.boxed != .anyCvrdt {
            try visitor.visitSingularEnumField(value: self.boxed, fieldNumber: 3)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: ProtoCRDTEnvelope, rhs: ProtoCRDTEnvelope) -> Bool {
        if lhs.serializerID != rhs.serializerID { return false }
        if lhs.payload != rhs.payload { return false }
        if lhs.boxed != rhs.boxed { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTEnvelope.Boxed: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "ANY_CVRDT"),
        1: .same(proto: "ANY_DELTA_CRDT"),
    ]
}

extension ProtoCRDTReplicatorMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "CRDTReplicatorMessage"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "write"),
    ]

    fileprivate class _StorageClass {
        var _value: ProtoCRDTReplicatorMessage.OneOf_Value?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._value = source._value
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1:
                    var v: ProtoCRDTWrite?
                    if let current = _storage._value {
                        try decoder.handleConflictingOneOf()
                        if case .write(let m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._value = .write(v) }
                default: break
                }
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if case .write(let v)? = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: ProtoCRDTReplicatorMessage, rhs: ProtoCRDTReplicatorMessage) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTWrite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "CRDTWrite"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "identity"),
        2: .same(proto: "envelope"),
        3: .same(proto: "replyTo"),
    ]

    fileprivate class _StorageClass {
        var _identity: ProtoCRDTIdentity?
        var _envelope: ProtoCRDTEnvelope?
        var _replyTo: ProtoActorAddress?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._identity = source._identity
            self._envelope = source._envelope
            self._replyTo = source._replyTo
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._envelope)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._replyTo)
                default: break
                }
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if let v = _storage._identity {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._envelope {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._replyTo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: ProtoCRDTWrite, rhs: ProtoCRDTWrite) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._identity != rhs_storage._identity { return false }
                if _storage._envelope != rhs_storage._envelope { return false }
                if _storage._replyTo != rhs_storage._replyTo { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTWriteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "CRDTWriteResult"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "error"),
    ]

    fileprivate class _StorageClass {
        var _type: ProtoCRDTWriteResult.TypeEnum = .success
        var _error: ProtoCRDTWriteError?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._type = source._type
            self._error = source._error
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._error)
                default: break
                }
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if _storage._type != .success {
                try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
            }
            if let v = _storage._error {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: ProtoCRDTWriteResult, rhs: ProtoCRDTWriteResult) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._type != rhs_storage._type { return false }
                if _storage._error != rhs_storage._error { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTWriteResult.TypeEnum: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "SUCCESS"),
        1: .same(proto: "FAILED"),
    ]
}

extension ProtoCRDTWriteError: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "CRDTWriteError"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
    ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularEnumField(value: &self.type)
            default: break
            }
        }
    }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.type != .missingCrdtForDelta {
            try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: ProtoCRDTWriteError, rhs: ProtoCRDTWriteError) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTWriteError.TypeEnum: SwiftProtobuf._ProtoNameProviding {
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MISSING_CRDT_FOR_DELTA"),
        1: .same(proto: "INCORRECT_DELTA_TYPE"),
        2: .same(proto: "CANNOT_WRITE_DELTA_FOR_NON_DELTA_CRDT"),
        3: .same(proto: "INPUT_AND_STORED_DATA_TYPE_MISMATCH"),
        4: .same(proto: "UNSUPPORTED_CRDT"),
    ]
}
