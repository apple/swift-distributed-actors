// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CRDT/CRDT.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct ProtoCRDTIdentity {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct ProtoCRDTReplicaId {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: OneOf_Value? {
        get { return self._storage._value }
        set { _uniqueStorage()._value = newValue }
    }

    var actorAddress: ProtoActorAddress {
        get {
            if case .actorAddress(let v)? = self._storage._value { return v }
            return ProtoActorAddress()
        }
        set { _uniqueStorage()._value = .actorAddress(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
        case actorAddress(ProtoActorAddress)

        #if !swift(>=4.1)
        static func == (lhs: ProtoCRDTReplicaId.OneOf_Value, rhs: ProtoCRDTReplicaId.OneOf_Value) -> Bool {
            switch (lhs, rhs) {
            case (.actorAddress(let l), .actorAddress(let r)): return l == r
            }
        }
        #endif
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

struct ProtoCRDTGCounter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var replicaID: ProtoCRDTReplicaId {
        get { return self._storage._replicaID ?? ProtoCRDTReplicaId() }
        set { _uniqueStorage()._replicaID = newValue }
    }

    /// Returns true if `replicaID` has been explicitly set.
    var hasReplicaID: Bool { return _storage._replicaID != nil }
    /// Clears the value of `replicaID`. Subsequent reads from it will return its default value.
    mutating func clearReplicaID() { _uniqueStorage()._replicaID = nil }

    /// Not a map because only integral or string type can be keys
    var state: [ProtoCRDTGCounter.ReplicaState] {
        get { return self._storage._state }
        set { _uniqueStorage()._state = newValue }
    }

    var delta: ProtoCRDTGCounter.Delta {
        get { return self._storage._delta ?? ProtoCRDTGCounter.Delta() }
        set { _uniqueStorage()._delta = newValue }
    }

    /// Returns true if `delta` has been explicitly set.
    var hasDelta: Bool { return _storage._delta != nil }
    /// Clears the value of `delta`. Subsequent reads from it will return its default value.
    mutating func clearDelta() { _uniqueStorage()._delta = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ReplicaState {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var replicaID: ProtoCRDTReplicaId {
            get { return self._storage._replicaID ?? ProtoCRDTReplicaId() }
            set { _uniqueStorage()._replicaID = newValue }
        }

        /// Returns true if `replicaID` has been explicitly set.
        var hasReplicaID: Bool { return _storage._replicaID != nil }
        /// Clears the value of `replicaID`. Subsequent reads from it will return its default value.
        mutating func clearReplicaID() { _uniqueStorage()._replicaID = nil }

        var count: UInt64 {
            get { return self._storage._count }
            set { _uniqueStorage()._count = newValue }
        }

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Delta {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var state: [ProtoCRDTGCounter.ReplicaState] = []

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ProtoCRDTIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "CRDTIdentity"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.id)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.id.isEmpty {
            try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProtoCRDTIdentity, rhs: ProtoCRDTIdentity) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTReplicaId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "CRDTReplicaId"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "actorAddress"),
    ]

    fileprivate class _StorageClass {
        var _value: ProtoCRDTReplicaId.OneOf_Value?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._value = source._value
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1:
                    var v: ProtoActorAddress?
                    if let current = _storage._value {
                        try decoder.handleConflictingOneOf()
                        if case .actorAddress(let m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._value = .actorAddress(v) }
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if case .actorAddress(let v)? = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProtoCRDTReplicaId, rhs: ProtoCRDTReplicaId) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTGCounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = "CRDTGCounter"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "replicaId"),
        2: .same(proto: "state"),
        3: .same(proto: "delta"),
    ]

    fileprivate class _StorageClass {
        var _replicaID: ProtoCRDTReplicaId?
        var _state: [ProtoCRDTGCounter.ReplicaState] = []
        var _delta: ProtoCRDTGCounter.Delta?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._replicaID = source._replicaID
            self._state = source._state
            self._delta = source._delta
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._replicaID)
                case 2: try decoder.decodeRepeatedMessageField(value: &_storage._state)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._delta)
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if let v = _storage._replicaID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if !_storage._state.isEmpty {
                try visitor.visitRepeatedMessageField(value: _storage._state, fieldNumber: 2)
            }
            if let v = _storage._delta {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProtoCRDTGCounter, rhs: ProtoCRDTGCounter) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._replicaID != rhs_storage._replicaID { return false }
                if _storage._state != rhs_storage._state { return false }
                if _storage._delta != rhs_storage._delta { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTGCounter.ReplicaState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = ProtoCRDTGCounter.protoMessageName + ".ReplicaState"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "replicaId"),
        2: .same(proto: "count"),
    ]

    fileprivate class _StorageClass {
        var _replicaID: ProtoCRDTReplicaId?
        var _count: UInt64 = 0

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            self._replicaID = source._replicaID
            self._count = source._count
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&self._storage) {
            self._storage = _StorageClass(copying: self._storage)
        }
        return self._storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = self._uniqueStorage()
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._replicaID)
                case 2: try decoder.decodeSingularUInt64Field(value: &_storage._count)
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(self._storage) { (_storage: _StorageClass) in
            if let v = _storage._replicaID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if _storage._count != 0 {
                try visitor.visitSingularUInt64Field(value: _storage._count, fieldNumber: 2)
            }
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProtoCRDTGCounter.ReplicaState, rhs: ProtoCRDTGCounter.ReplicaState) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._replicaID != rhs_storage._replicaID { return false }
                if _storage._count != rhs_storage._count { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension ProtoCRDTGCounter.Delta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = ProtoCRDTGCounter.protoMessageName + ".Delta"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "state"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &self.state)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.state.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.state, fieldNumber: 1)
        }
        try self.unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: ProtoCRDTGCounter.Delta, rhs: ProtoCRDTGCounter.Delta) -> Bool {
        if lhs.state != rhs.state { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
