// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import DistributedActors
import Files
import XPCActorServiceAPI

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for XPCGreetingsService.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension XPCGreetingsService.Message: Codable {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case _boxGreetingsServiceProtocol

    }

    public enum CodingKeys: CodingKey {
        case _case
        case _boxGreetingsServiceProtocol

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case ._boxGreetingsServiceProtocol:
            let boxed = try container.decode(GeneratedActor.Messages.GreetingsServiceProtocol.self, forKey: CodingKeys._boxGreetingsServiceProtocol)
            self = .greetingsServiceProtocol(boxed)

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .greetingsServiceProtocol(let boxed):
            try container.encode(DiscriminatorKeys._boxGreetingsServiceProtocol.rawValue, forKey: CodingKeys._case)
            try container.encode(boxed, forKey: CodingKeys._boxGreetingsServiceProtocol)

        }
    }
}
