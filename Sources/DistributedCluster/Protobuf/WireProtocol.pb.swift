// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: WireProtocol.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2018-2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct _ProtoHandshakeOffer {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: _ProtoProtocolVersion {
    get {return _version ?? _ProtoProtocolVersion()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var originNode: _ProtoUniqueNode {
    get {return _originNode ?? _ProtoUniqueNode()}
    set {_originNode = newValue}
  }
  /// Returns true if `originNode` has been explicitly set.
  var hasOriginNode: Bool {return self._originNode != nil}
  /// Clears the value of `originNode`. Subsequent reads from it will return its default value.
  mutating func clearOriginNode() {self._originNode = nil}

  /// In the future we may want to add additional information
  /// about certain capabilities here. E.g. when a node supports
  /// faster transport like InfiniBand and the likes, so we can
  /// upgrade the connection in case both nodes support the fast
  /// transport.
  var targetNode: _ProtoNode {
    get {return _targetNode ?? _ProtoNode()}
    set {_targetNode = newValue}
  }
  /// Returns true if `targetNode` has been explicitly set.
  var hasTargetNode: Bool {return self._targetNode != nil}
  /// Clears the value of `targetNode`. Subsequent reads from it will return its default value.
  mutating func clearTargetNode() {self._targetNode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: _ProtoProtocolVersion? = nil
  fileprivate var _originNode: _ProtoUniqueNode? = nil
  fileprivate var _targetNode: _ProtoNode? = nil
}

struct _ProtoHandshakeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: _ProtoHandshakeResponse.OneOf_Status? = nil

  var accept: _ProtoHandshakeAccept {
    get {
      if case .accept(let v)? = status {return v}
      return _ProtoHandshakeAccept()
    }
    set {status = .accept(newValue)}
  }

  var reject: _ProtoHandshakeReject {
    get {
      if case .reject(let v)? = status {return v}
      return _ProtoHandshakeReject()
    }
    set {status = .reject(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Status: Equatable {
    case accept(_ProtoHandshakeAccept)
    case reject(_ProtoHandshakeReject)

  #if !swift(>=4.1)
    static func ==(lhs: _ProtoHandshakeResponse.OneOf_Status, rhs: _ProtoHandshakeResponse.OneOf_Status) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.accept, .accept): return {
        guard case .accept(let l) = lhs, case .accept(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.reject, .reject): return {
        guard case .reject(let l) = lhs, case .reject(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

struct _ProtoHandshakeAccept {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: _ProtoProtocolVersion {
    get {return _version ?? _ProtoProtocolVersion()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var originNode: _ProtoUniqueNode {
    get {return _originNode ?? _ProtoUniqueNode()}
    set {_originNode = newValue}
  }
  /// Returns true if `originNode` has been explicitly set.
  var hasOriginNode: Bool {return self._originNode != nil}
  /// Clears the value of `originNode`. Subsequent reads from it will return its default value.
  mutating func clearOriginNode() {self._originNode = nil}

  var targetNode: _ProtoUniqueNode {
    get {return _targetNode ?? _ProtoUniqueNode()}
    set {_targetNode = newValue}
  }
  /// Returns true if `targetNode` has been explicitly set.
  var hasTargetNode: Bool {return self._targetNode != nil}
  /// Clears the value of `targetNode`. Subsequent reads from it will return its default value.
  mutating func clearTargetNode() {self._targetNode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: _ProtoProtocolVersion? = nil
  fileprivate var _originNode: _ProtoUniqueNode? = nil
  fileprivate var _targetNode: _ProtoUniqueNode? = nil
}

struct _ProtoHandshakeReject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: _ProtoProtocolVersion {
    get {return _version ?? _ProtoProtocolVersion()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var originNode: _ProtoUniqueNode {
    get {return _originNode ?? _ProtoUniqueNode()}
    set {_originNode = newValue}
  }
  /// Returns true if `originNode` has been explicitly set.
  var hasOriginNode: Bool {return self._originNode != nil}
  /// Clears the value of `originNode`. Subsequent reads from it will return its default value.
  mutating func clearOriginNode() {self._originNode = nil}

  var targetNode: _ProtoUniqueNode {
    get {return _targetNode ?? _ProtoUniqueNode()}
    set {_targetNode = newValue}
  }
  /// Returns true if `targetNode` has been explicitly set.
  var hasTargetNode: Bool {return self._targetNode != nil}
  /// Clears the value of `targetNode`. Subsequent reads from it will return its default value.
  mutating func clearTargetNode() {self._targetNode = nil}

  var reason: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: _ProtoProtocolVersion? = nil
  fileprivate var _originNode: _ProtoUniqueNode? = nil
  fileprivate var _targetNode: _ProtoUniqueNode? = nil
}

struct _ProtoEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recipient: _ProtoActorID {
    get {return _recipient ?? _ProtoActorID()}
    set {_recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  var hasRecipient: Bool {return self._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  mutating func clearRecipient() {self._recipient = nil}

  var manifest: _ProtoManifest {
    get {return _manifest ?? _ProtoManifest()}
    set {_manifest = newValue}
  }
  /// Returns true if `manifest` has been explicitly set.
  var hasManifest: Bool {return self._manifest != nil}
  /// Clears the value of `manifest`. Subsequent reads from it will return its default value.
  mutating func clearManifest() {self._manifest = nil}

  var payload: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recipient: _ProtoActorID? = nil
  fileprivate var _manifest: _ProtoManifest? = nil
}

/// System messages have to be reliable, therefore they need to be acknowledged
/// by the receiving node.
struct _ProtoSystemEnvelope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNr: UInt64 = 0

  var from: _ProtoUniqueNode {
    get {return _from ?? _ProtoUniqueNode()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {self._from = nil}

  var manifest: _ProtoManifest {
    get {return _manifest ?? _ProtoManifest()}
    set {_manifest = newValue}
  }
  /// Returns true if `manifest` has been explicitly set.
  var hasManifest: Bool {return self._manifest != nil}
  /// Clears the value of `manifest`. Subsequent reads from it will return its default value.
  mutating func clearManifest() {self._manifest = nil}

  var payload: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _from: _ProtoUniqueNode? = nil
  fileprivate var _manifest: _ProtoManifest? = nil
}

struct _ProtoSystemAck {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sequenceNr: UInt64 = 0

  var from: _ProtoUniqueNode {
    get {return _from ?? _ProtoUniqueNode()}
    set {_from = newValue}
  }
  /// Returns true if `from` has been explicitly set.
  var hasFrom: Bool {return self._from != nil}
  /// Clears the value of `from`. Subsequent reads from it will return its default value.
  mutating func clearFrom() {self._from = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _from: _ProtoUniqueNode? = nil
}

/// The version is represented as 4 bytes:
/// - reserved: Can be used in the future for additional flags
/// - major
/// - minor
/// - patch
/// Because protobuf does not support values with less than 4 bytes, we
/// encode all values in a single uint32 and provide an extension to
/// retrieve the specific values.
struct _ProtoProtocolVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// TODO: wasteful representation, keeping for now to iterate on handshake -- ktoso
  var reserved: UInt32 = 0

  var major: UInt32 = 0

  var minor: UInt32 = 0

  var patch: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _ProtoHandshakeOffer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HandshakeOffer"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "originNode"),
    3: .same(proto: "targetNode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._originNode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetNode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._targetNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoHandshakeOffer, rhs: _ProtoHandshakeOffer) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._originNode != rhs._originNode {return false}
    if lhs._targetNode != rhs._targetNode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoHandshakeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HandshakeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "accept"),
    2: .same(proto: "reject"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: _ProtoHandshakeAccept?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .accept(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .accept(v)
        }
      }()
      case 2: try {
        var v: _ProtoHandshakeReject?
        var hadOneofValue = false
        if let current = self.status {
          hadOneofValue = true
          if case .reject(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.status = .reject(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.status {
    case .accept?: try {
      guard case .accept(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .reject?: try {
      guard case .reject(let v)? = self.status else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoHandshakeResponse, rhs: _ProtoHandshakeResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoHandshakeAccept: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HandshakeAccept"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "originNode"),
    3: .same(proto: "targetNode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._originNode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetNode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._targetNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoHandshakeAccept, rhs: _ProtoHandshakeAccept) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._originNode != rhs._originNode {return false}
    if lhs._targetNode != rhs._targetNode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoHandshakeReject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HandshakeReject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "originNode"),
    3: .same(proto: "targetNode"),
    4: .same(proto: "reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._originNode) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._targetNode) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._originNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._targetNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.reason.isEmpty {
      try visitor.visitSingularStringField(value: self.reason, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoHandshakeReject, rhs: _ProtoHandshakeReject) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._originNode != rhs._originNode {return false}
    if lhs._targetNode != rhs._targetNode {return false}
    if lhs.reason != rhs.reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Envelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "recipient"),
    2: .same(proto: "manifest"),
    3: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._recipient) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._manifest) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recipient {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._manifest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoEnvelope, rhs: _ProtoEnvelope) -> Bool {
    if lhs._recipient != rhs._recipient {return false}
    if lhs._manifest != rhs._manifest {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoSystemEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SystemEnvelope"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequenceNr"),
    2: .same(proto: "from"),
    3: .same(proto: "manifest"),
    4: .same(proto: "payload"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequenceNr) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._manifest) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNr != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequenceNr, fieldNumber: 1)
    }
    if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._manifest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoSystemEnvelope, rhs: _ProtoSystemEnvelope) -> Bool {
    if lhs.sequenceNr != rhs.sequenceNr {return false}
    if lhs._from != rhs._from {return false}
    if lhs._manifest != rhs._manifest {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoSystemAck: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SystemAck"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sequenceNr"),
    2: .same(proto: "from"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.sequenceNr) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._from) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sequenceNr != 0 {
      try visitor.visitSingularUInt64Field(value: self.sequenceNr, fieldNumber: 1)
    }
    if let v = self._from {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoSystemAck, rhs: _ProtoSystemAck) -> Bool {
    if lhs.sequenceNr != rhs.sequenceNr {return false}
    if lhs._from != rhs._from {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoProtocolVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ProtocolVersion"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .same(proto: "major"),
    3: .same(proto: "minor"),
    4: .same(proto: "patch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.reserved) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.major) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.minor) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.patch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.reserved != 0 {
      try visitor.visitSingularUInt32Field(value: self.reserved, fieldNumber: 1)
    }
    if self.major != 0 {
      try visitor.visitSingularUInt32Field(value: self.major, fieldNumber: 2)
    }
    if self.minor != 0 {
      try visitor.visitSingularUInt32Field(value: self.minor, fieldNumber: 3)
    }
    if self.patch != 0 {
      try visitor.visitSingularUInt32Field(value: self.patch, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: _ProtoProtocolVersion, rhs: _ProtoProtocolVersion) -> Bool {
    if lhs.reserved != rhs.reserved {return false}
    if lhs.major != rhs.major {return false}
    if lhs.minor != rhs.minor {return false}
    if lhs.patch != rhs.patch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
