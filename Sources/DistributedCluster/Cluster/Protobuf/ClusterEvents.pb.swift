// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cluster/ClusterEvents.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct _ProtoClusterEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// other types of events are leadership and reachability changes,
  /// though those we do not need to send over the wire normally.
  public var event: _ProtoClusterEvent.OneOf_Event? = nil

  public var snapshot: _ProtoClusterMembership {
    get {
      if case .snapshot(let v)? = event {return v}
      return _ProtoClusterMembership()
    }
    set {event = .snapshot(newValue)}
  }

  public var membershipChange: _ProtoClusterMembershipChange {
    get {
      if case .membershipChange(let v)? = event {return v}
      return _ProtoClusterMembershipChange()
    }
    set {event = .membershipChange(newValue)}
  }

  public var leadershipChange: _ProtoClusterLeadershipChange {
    get {
      if case .leadershipChange(let v)? = event {return v}
      return _ProtoClusterLeadershipChange()
    }
    set {event = .leadershipChange(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// other types of events are leadership and reachability changes,
  /// though those we do not need to send over the wire normally.
  public enum OneOf_Event: Equatable {
    case snapshot(_ProtoClusterMembership)
    case membershipChange(_ProtoClusterMembershipChange)
    case leadershipChange(_ProtoClusterLeadershipChange)

  #if !swift(>=4.1)
    public static func ==(lhs: _ProtoClusterEvent.OneOf_Event, rhs: _ProtoClusterEvent.OneOf_Event) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.snapshot, .snapshot): return {
        guard case .snapshot(let l) = lhs, case .snapshot(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.membershipChange, .membershipChange): return {
        guard case .membershipChange(let l) = lhs, case .membershipChange(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.leadershipChange, .leadershipChange): return {
        guard case .leadershipChange(let l) = lhs, case .leadershipChange(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct _ProtoClusterMembershipChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var node: _ProtoUniqueNode {
    get {return _node ?? _ProtoUniqueNode()}
    set {_node = newValue}
  }
  /// Returns true if `node` has been explicitly set.
  public var hasNode: Bool {return self._node != nil}
  /// Clears the value of `node`. Subsequent reads from it will return its default value.
  public mutating func clearNode() {self._node = nil}

  public var fromStatus: _ProtoClusterMemberStatus = .unspecified

  public var toStatus: _ProtoClusterMemberStatus = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _node: _ProtoUniqueNode? = nil
}

public struct _ProtoClusterLeadershipChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var oldLeader: _ProtoClusterMember {
    get {return _oldLeader ?? _ProtoClusterMember()}
    set {_oldLeader = newValue}
  }
  /// Returns true if `oldLeader` has been explicitly set.
  public var hasOldLeader: Bool {return self._oldLeader != nil}
  /// Clears the value of `oldLeader`. Subsequent reads from it will return its default value.
  public mutating func clearOldLeader() {self._oldLeader = nil}

  public var newLeader: _ProtoClusterMember {
    get {return _newLeader ?? _ProtoClusterMember()}
    set {_newLeader = newValue}
  }
  /// Returns true if `newLeader` has been explicitly set.
  public var hasNewLeader: Bool {return self._newLeader != nil}
  /// Clears the value of `newLeader`. Subsequent reads from it will return its default value.
  public mutating func clearNewLeader() {self._newLeader = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _oldLeader: _ProtoClusterMember? = nil
  fileprivate var _newLeader: _ProtoClusterMember? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _ProtoClusterEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "snapshot"),
    2: .same(proto: "membershipChange"),
    3: .same(proto: "leadershipChange"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: _ProtoClusterMembership?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .snapshot(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .snapshot(v)
        }
      }()
      case 2: try {
        var v: _ProtoClusterMembershipChange?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .membershipChange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .membershipChange(v)
        }
      }()
      case 3: try {
        var v: _ProtoClusterLeadershipChange?
        var hadOneofValue = false
        if let current = self.event {
          hadOneofValue = true
          if case .leadershipChange(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.event = .leadershipChange(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.event {
    case .snapshot?: try {
      guard case .snapshot(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .membershipChange?: try {
      guard case .membershipChange(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .leadershipChange?: try {
      guard case .leadershipChange(let v)? = self.event else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterEvent, rhs: _ProtoClusterEvent) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoClusterMembershipChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterMembershipChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "node"),
    2: .same(proto: "fromStatus"),
    3: .same(proto: "toStatus"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._node) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.fromStatus) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.toStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._node {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.fromStatus != .unspecified {
      try visitor.visitSingularEnumField(value: self.fromStatus, fieldNumber: 2)
    }
    if self.toStatus != .unspecified {
      try visitor.visitSingularEnumField(value: self.toStatus, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterMembershipChange, rhs: _ProtoClusterMembershipChange) -> Bool {
    if lhs._node != rhs._node {return false}
    if lhs.fromStatus != rhs.fromStatus {return false}
    if lhs.toStatus != rhs.toStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoClusterLeadershipChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterLeadershipChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "oldLeader"),
    2: .same(proto: "newLeader"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._oldLeader) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._newLeader) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._oldLeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._newLeader {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterLeadershipChange, rhs: _ProtoClusterLeadershipChange) -> Bool {
    if lhs._oldLeader != rhs._oldLeader {return false}
    if lhs._newLeader != rhs._newLeader {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
