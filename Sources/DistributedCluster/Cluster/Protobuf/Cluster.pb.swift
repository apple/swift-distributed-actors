// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Cluster/Cluster.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2019 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct _ProtoClusterShellMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: _ProtoClusterShellMessage.OneOf_Message? = nil

  /// Not all messages are serializable, on purpose, as they are not intended to cross over the network
  public var clusterEvent: _ProtoClusterEvent {
    get {
      if case .clusterEvent(let v)? = message {return v}
      return _ProtoClusterEvent()
    }
    set {message = .clusterEvent(newValue)}
  }

  public var inbound: _ProtoClusterInbound {
    get {
      if case .inbound(let v)? = message {return v}
      return _ProtoClusterInbound()
    }
    set {message = .inbound(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Message: Equatable {
    /// Not all messages are serializable, on purpose, as they are not intended to cross over the network
    case clusterEvent(_ProtoClusterEvent)
    case inbound(_ProtoClusterInbound)

  #if !swift(>=4.1)
    public static func ==(lhs: _ProtoClusterShellMessage.OneOf_Message, rhs: _ProtoClusterShellMessage.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.clusterEvent, .clusterEvent): return {
        guard case .clusterEvent(let l) = lhs, case .clusterEvent(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.inbound, .inbound): return {
        guard case .inbound(let l) = lhs, case .inbound(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct _ProtoClusterInbound {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Not all messages are serializable, on purpose, as they are not intended to cross over the network
  public var message: _ProtoClusterInbound.OneOf_Message? = nil

  public var restInPeace: _ProtoClusterRestInPeace {
    get {
      if case .restInPeace(let v)? = message {return v}
      return _ProtoClusterRestInPeace()
    }
    set {message = .restInPeace(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Not all messages are serializable, on purpose, as they are not intended to cross over the network
  public enum OneOf_Message: Equatable {
    case restInPeace(_ProtoClusterRestInPeace)

  #if !swift(>=4.1)
    public static func ==(lhs: _ProtoClusterInbound.OneOf_Message, rhs: _ProtoClusterInbound.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.restInPeace, .restInPeace): return {
        guard case .restInPeace(let l) = lhs, case .restInPeace(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  public init() {}
}

public struct _ProtoClusterRestInPeace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetNode: _ProtoUniqueNode {
    get {return _targetNode ?? _ProtoUniqueNode()}
    set {_targetNode = newValue}
  }
  /// Returns true if `targetNode` has been explicitly set.
  public var hasTargetNode: Bool {return self._targetNode != nil}
  /// Clears the value of `targetNode`. Subsequent reads from it will return its default value.
  public mutating func clearTargetNode() {self._targetNode = nil}

  public var fromNode: _ProtoUniqueNode {
    get {return _fromNode ?? _ProtoUniqueNode()}
    set {_fromNode = newValue}
  }
  /// Returns true if `fromNode` has been explicitly set.
  public var hasFromNode: Bool {return self._fromNode != nil}
  /// Clears the value of `fromNode`. Subsequent reads from it will return its default value.
  public mutating func clearFromNode() {self._fromNode = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _targetNode: _ProtoUniqueNode? = nil
  fileprivate var _fromNode: _ProtoUniqueNode? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension _ProtoClusterShellMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterShellMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "clusterEvent"),
    2: .same(proto: "inbound"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: _ProtoClusterEvent?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .clusterEvent(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .clusterEvent(v)
        }
      }()
      case 2: try {
        var v: _ProtoClusterInbound?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .inbound(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .inbound(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every case branch when no optimizations are
    // enabled. https://github.com/apple/swift-protobuf/issues/1034
    switch self.message {
    case .clusterEvent?: try {
      guard case .clusterEvent(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .inbound?: try {
      guard case .inbound(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterShellMessage, rhs: _ProtoClusterShellMessage) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoClusterInbound: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterInbound"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "restInPeace"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: _ProtoClusterRestInPeace?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .restInPeace(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .restInPeace(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if case .restInPeace(let v)? = self.message {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterInbound, rhs: _ProtoClusterInbound) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension _ProtoClusterRestInPeace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ClusterRestInPeace"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "targetNode"),
    2: .same(proto: "fromNode"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._targetNode) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fromNode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._targetNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._fromNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: _ProtoClusterRestInPeace, rhs: _ProtoClusterRestInPeace) -> Bool {
    if lhs._targetNode != rhs._targetNode {return false}
    if lhs._fromNode != rhs._fromNode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
