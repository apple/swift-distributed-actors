// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

import DistributedActors
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated Greeter messages 

/// DO NOT EDIT: Generated Greeter messages
extension Greeter {
    public enum Message { 
        case greet(name: String) 
    }

    
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated Greeter behavior

extension Greeter {

    public static func makeBehavior(instance: Greeter) -> Behavior<Message> {
        return .setup { context in
            var ctx = Actor<Greeter>.Context(underlying: context)
            var instance = instance // TODO only var if any of the methods are mutating

            /* await */ instance.preStart(context: ctx)

            return Behavior<Message>.receiveMessage { message in
                switch message { 
                
                case .greet(let name):
                    instance.greet(name: name) 
                
                }
                return .same
            }.receiveSignal { context, signal in 
                if signal is Signals.PostStop {
                    var ctx = Actor<Greeter>.Context(underlying: context)
                    instance.postStop(context: ctx)
                }
                return .same
            }
        }
    }
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: Extend Actor for Greeter

extension Actor where A.Message == Greeter.Message {
    
     func greet(name: String) { 
        self.ref.tell(.greet(name: name))
    } 
    
}
