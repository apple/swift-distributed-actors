// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====


// tag::xpc_example[]
import DistributedActors
import DistributedActorsXPC
import NIO

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for GreetingsServiceStub.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension GreetingsServiceStub.Message: Codable {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case logGreeting
        case greet
        case _boxGreetingsService

    }

    public enum CodingKeys: CodingKey {
        case _case
        case logGreeting_name
        case greet_name
        case greet__replyTo
        case _boxGreetingsService

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .logGreeting:
            let name = try container.decode(String.self, forKey: CodingKeys.logGreeting_name)
            self = .logGreeting(name: name)
        case .greet:
            let name = try container.decode(String.self, forKey: CodingKeys.greet_name)
            let _replyTo = try container.decode(ActorRef<String>.self, forKey: CodingKeys.greet__replyTo)
            self = .greet(name: name, _replyTo: _replyTo)
        case ._boxGreetingsService:
            let boxed = try container.decode(GeneratedActor.Messages.GreetingsService.self, forKey: CodingKeys._boxGreetingsService)
            self = .greetingsService(boxed)

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .logGreeting(let name):
            try container.encode(DiscriminatorKeys.logGreeting.rawValue, forKey: CodingKeys._case)
            try container.encode(name, forKey: CodingKeys.logGreeting_name)
        case .greet(let name, let _replyTo):
            try container.encode(DiscriminatorKeys.greet.rawValue, forKey: CodingKeys._case)
            try container.encode(name, forKey: CodingKeys.greet_name)
            try container.encode(_replyTo, forKey: CodingKeys.greet__replyTo)
        case .greetingsService(let boxed):
            try container.encode(DiscriminatorKeys._boxGreetingsService.rawValue, forKey: CodingKeys._case)
            try container.encode(boxed, forKey: CodingKeys._boxGreetingsService)

        }
    }
}
