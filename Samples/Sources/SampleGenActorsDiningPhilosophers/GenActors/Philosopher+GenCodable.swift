// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

import DistributedActors

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Codable conformance for Philosopher.Message
// TODO: This will not be required, once Swift synthesizes Codable conformances for enums with associated values 

extension Philosopher.Message {
    // TODO: Check with Swift team which style of discriminator to aim for
    public enum DiscriminatorKeys: String, Decodable {
        case attemptToTakeForks
        case stopEating

    }

    public enum CodingKeys: CodingKey {
        case _case

    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        switch try container.decode(DiscriminatorKeys.self, forKey: CodingKeys._case) {
        case .attemptToTakeForks:
            self = .attemptToTakeForks
        case .stopEating:
            self = .stopEating

        }
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
        case .attemptToTakeForks:
            try container.encode(DiscriminatorKeys.attemptToTakeForks.rawValue, forKey: CodingKeys._case)
        case .stopEating:
            try container.encode(DiscriminatorKeys.stopEating.rawValue, forKey: CodingKeys._case)

        }
    }
}
