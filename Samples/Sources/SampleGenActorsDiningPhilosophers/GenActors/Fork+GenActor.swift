// ==== ------------------------------------------------------------------ ====
// === DO NOT EDIT: Generated by GenActors                     
// ==== ------------------------------------------------------------------ ====

import DistributedActors

// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated Fork messages 

/// DO NOT EDIT: Generated Fork messages
extension Fork {

    public enum Message { 
        case take(_replyTo: ActorRef<Bool>) 
        case putBack 
    }
    
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: DO NOT EDIT: Generated Fork behavior

extension Fork {

    public static func makeBehavior(instance: Fork) -> Behavior<Message> {
        return .setup { _context in
            let context = Actor<Fork>.Context(underlying: _context)
            var instance = instance

            /* await */ instance.preStart(context: context)

            return Behavior<Message>.receiveMessage { message in
                switch message { 
                
                case .take(let _replyTo):
                    let result = instance.take()
                    _replyTo.tell(result)
 
                case .putBack:
                    instance.putBack()
 
                
                }
                return .same
            }.receiveSignal { _context, signal in 
                let context = Actor<Fork>.Context(underlying: _context)

                switch signal {
                case is Signals.PostStop: 
                    instance.postStop(context: context)
                    return .same
                case let terminated as Signals.Terminated:
                    switch try instance.receiveTerminated(context: context, terminated: terminated) {
                    case .unhandled: 
                        return .unhandled
                    case .stop: 
                        return .stop
                    case .ignore: 
                        return .same
                    }
                default:
                    try instance.receiveSignal(context: context, signal: signal)
                    return .same
                }
            }
        }
    }
}
// ==== ----------------------------------------------------------------------------------------------------------------
// MARK: Extend Actor for Fork

extension Actor where A.Message == Fork.Message {

     func take() -> Reply<Bool> {
        // TODO: FIXME perhaps timeout should be taken from context
        Reply(nioFuture:
            self.ref.ask(for: Bool.self, timeout: .effectivelyInfinite) { _replyTo in
                .take(_replyTo: _replyTo)}.nioFuture
        )
    }
 

     func putBack() {
        self.ref.tell(.putBack)
    }
 

}
