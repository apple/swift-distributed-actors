//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift Distributed Actors open source project
//
// Copyright (c) 2018 Apple Inc. and the Swift Distributed Actors project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.md for the list of Swift Distributed Actors project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//


syntax = "proto3";

option optimize_for = SPEED;
option swift_prefix = "Proto";

// === Handshake --------------------------------------------------------------

message HandshakeOffer {
    ProtocolVersion version = 1;
    UniqueNodeAddress from  = 2;
    NodeAddress to          = 3;
    // In the future we may want to add additional information
    // about certain capabilities here. E.g. when a node supports
    // faster transport like InfiniBand and the likes, so we can
    // upgrade the connection in case both nodes support the fast
    // transport.
}

message HandshakeResponse {
    oneof status {
        HandshakeAccept accept = 1;
        HandshakeReject reject = 2;
    }
}

message HandshakeAccept {
    ProtocolVersion version  = 1;
    UniqueNodeAddress origin = 2;
    UniqueNodeAddress from   = 3;
}

message HandshakeReject {
    ProtocolVersion version  = 1;
    UniqueNodeAddress origin = 2;
    // In the reject case this is an `Address` instead of a `UniqueNodeAddress`,
    // to explicitly prevent this from forming an association.
    NodeAddress from         = 3;
    string reason            = 4;
}

// === Envelope --------------------------------------------------------------

message Envelope {
    ActorAddress recipient = 1;

    uint32 serializerId    = 2;
    bytes payload          = 3;
}

// System messages have to be reliable, therefore they need to be acknowledged
// by the receiving node.
message SystemEnvelope {
    uint64 sequenceNr       = 1;
    UniqueNodeAddress from  = 2;

    uint32 serializerId     = 3;
    bytes payload           = 4;
}

message ActorAddress {
    UniqueNodeAddress node = 1; // TODO oneof { senderNode | recipientNode | node }
    ActorPath path         = 2;
    uint32 incarnation     = 3;
}

message ActorPath {
    repeated string segments = 1;
}

message SystemAck {
    uint64 sequenceNr      = 1;
    UniqueNodeAddress from = 2;
}

message UniqueNodeAddress {
    NodeAddress address = 1;
    uint32 nid          = 2;
}

message NodeAddress {
    string protocol = 1;
    string system   = 2;
    string hostname = 3;
    uint32 port     = 4;
}

// The version is represented as 4 bytes:
// - reserved: Can be used in the future for additional flags
// - major
// - minor
// - patch
// Because protobuf does not support values with less than 4 bytes, we
// encode all values in a single uint32 and provide an extension to
// retrieve the specific values.
message ProtocolVersion {
    // TODO: nicer representation though needs endiannees dance since this is then encoded in little endian; revisit how and where to represent once we have a solid handshake -- ktoso
    // uint32 value = 1;

    // TODO: wasteful representation, keeping for now to iterate on handshake -- ktoso
    uint32 reserved = 1;
    uint32 major    = 2;
    uint32 minor    = 3;
    uint32 patch    = 4;
}
